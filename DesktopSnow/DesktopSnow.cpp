// DesktopSnow.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "DesktopSnow.h"
#include "DesktopSnowWnd.h"
#include "ThankDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CDesktopSnowApp

BEGIN_MESSAGE_MAP(CDesktopSnowApp, CWinApp)
	ON_COMMAND(ID_APP_ABOUT, &CDesktopSnowApp::OnAppAbout)
	ON_COMMAND(ID_MENU_THANKS, &CDesktopSnowApp::OnMenuThanks)
END_MESSAGE_MAP()


// CDesktopSnowApp 构造

CDesktopSnowApp::CDesktopSnowApp()
{
	isNT= false;
		cxScreen = GetSystemMetrics (SM_CXSCREEN) ;
		cyScreen = GetSystemMetrics (SM_CYSCREEN) ;

		GdiplusStartup( &m_pGdiToken , &m_gdiplusStartupInput , NULL );
		hFuncInst = LoadLibrary("User32.DLL"); 
		if(hFuncInst) 
			UpdateLayeredWindow=(MYFUNC)GetProcAddress(hFuncInst, "UpdateLayeredWindow");
		else
		{
			AfxMessageBox("User32.dll ERROR!");
			exit(0);
		}
		unsigned char mididata[0x9D5] = {
			0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x31, 0x01, 0xE0, 0x4D, 0x54, 
			0x72, 0x6B, 0x00, 0x00, 0x00, 0x21, 0x00, 0xFF, 0x03, 0x00, 0x00, 0xFF, 0x51, 0x03, 0x07, 0xA1, 
			0x20, 0x00, 0xFF, 0x58, 0x04, 0x03, 0x02, 0x18, 0x08, 0x81, 0xEC, 0x20, 0xFF, 0x58, 0x04, 0x04, 
			0x02, 0x18, 0x08, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x15, 0x00, 
			0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x00, 0xFF, 0x51, 0x03, 0x07, 0xA1, 0x20, 
			0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 
			0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 
			0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x00, 0xFF, 0x2F, 0x00, 
			0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 
			0x6B, 0x34, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x03, 0x19, 0x00, 0xFF, 
			0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x35, 0x00, 0xB4, 0x5B, 0x76, 0x00, 0xB4, 0x00, 0x00, 
			0x00, 0xB4, 0x20, 0x01, 0x00, 0xC4, 0x0B, 0x87, 0x40, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 
			0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x00, 0x94, 
			0x47, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x51, 0x64, 0x81, 
			0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x4E, 
			0x64, 0x81, 0x59, 0x94, 0x4E, 0x00, 0x17, 0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 
			0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 0x4C, 
			0x00, 0x2E, 0x94, 0x51, 0x64, 0x00, 0x94, 0x49, 0x64, 0x83, 0x32, 0x94, 0x51, 0x00, 0x2E, 0x94, 
			0x51, 0x64, 0x81, 0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x53, 0x64, 0x81, 0x59, 0x94, 0x53, 0x00, 
			0x17, 0x94, 0x51, 0x64, 0x81, 0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x4F, 0x64, 0x67, 0x94, 0x49, 
			0x00, 0x72, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 
			0x4E, 0x00, 0x00, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x28, 0xB4, 0x5B, 0x74, 0x83, 0x0A, 
			0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x53, 0x64, 
			0x00, 0x94, 0x4B, 0x64, 0x83, 0x32, 0x94, 0x53, 0x00, 0x2E, 0x94, 0x53, 0x64, 0x81, 0x59, 0x94, 
			0x53, 0x00, 0x17, 0x94, 0x54, 0x64, 0x81, 0x59, 0x94, 0x54, 0x00, 0x17, 0x94, 0x53, 0x64, 0x81, 
			0x59, 0x94, 0x53, 0x00, 0x17, 0x94, 0x51, 0x64, 0x67, 0x94, 0x4B, 0x00, 0x72, 0x94, 0x51, 0x00, 
			0x17, 0x94, 0x4F, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x2E, 0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 
			0x4C, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x81, 0x59, 0x94, 0x4A, 0x00, 0x17, 0x94, 0x4A, 0x64, 0x81, 
			0x59, 0x94, 0x4A, 0x00, 0x17, 0x94, 0x4C, 0x64, 0x00, 0x94, 0x48, 0x64, 0x83, 0x32, 0x94, 0x4C, 
			0x00, 0x00, 0x94, 0x48, 0x00, 0x2E, 0x94, 0x51, 0x64, 0x83, 0x32, 0x94, 0x51, 0x00, 0x2E, 0x94, 
			0x4E, 0x64, 0x00, 0x94, 0x48, 0x64, 0x83, 0x32, 0x94, 0x4E, 0x00, 0x00, 0x94, 0x48, 0x00, 0x2E, 
			0xB4, 0x00, 0x00, 0x00, 0xB4, 0x20, 0x01, 0x00, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x86, 
			0x64, 0x94, 0x4F, 0x00, 0x00, 0x94, 0x47, 0x00, 0x5C, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 
			0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x00, 0x94, 
			0x47, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x00, 
			0x94, 0x47, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 
			0x00, 0x94, 0x47, 0x00, 0x2E, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x4A, 0x64, 0x86, 0x64, 0x94, 0x4E, 
			0x00, 0x00, 0x94, 0x4A, 0x00, 0x5C, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 
			0x4E, 0x00, 0x00, 0x94, 0x47, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 
			0x94, 0x4F, 0x00, 0x00, 0x94, 0x47, 0x00, 0x2E, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x4A, 0x64, 0x83, 
			0x32, 0x94, 0x4E, 0x00, 0x00, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4C, 0x64, 0x00, 0x94, 0x49, 0x64, 
			0x83, 0x32, 0x94, 0x4C, 0x00, 0x00, 0x94, 0x49, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x86, 0x64, 0x94, 
			0x4A, 0x00, 0x5C, 0x94, 0x51, 0x64, 0x83, 0x32, 0x94, 0x51, 0x00, 0x2E, 0x94, 0x53, 0x64, 0x83, 
			0x32, 0x94, 0x53, 0x00, 0x2E, 0x94, 0x51, 0x64, 0x81, 0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x51, 
			0x64, 0x81, 0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 
			0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x56, 0x64, 0x86, 0x64, 0x94, 0x56, 
			0x00, 0x5C, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4C, 0x64, 0x83, 0x32, 
			0x94, 0x4C, 0x00, 0x2E, 0x94, 0x51, 0x64, 0x00, 0x94, 0x48, 0x64, 0x83, 0x32, 0x94, 0x51, 0x00, 
			0x00, 0x94, 0x48, 0x00, 0x2E, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4E, 
			0x00, 0x00, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x86, 0x64, 0x94, 
			0x4F, 0x00, 0x00, 0x94, 0x47, 0x00, 0x5C, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 0x00, 0x2E, 
			0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x00, 0x94, 0x47, 0x00, 
			0x2E, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x51, 0x64, 0x81, 0x59, 0x94, 
			0x51, 0x00, 0x17, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x4E, 0x64, 0x81, 
			0x59, 0x94, 0x4E, 0x00, 0x17, 0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 0x94, 0x4C, 
			0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 0x00, 0x2E, 
			0x94, 0x4C, 0x64, 0x00, 0x94, 0x48, 0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 0x94, 0x51, 0x64, 
			0x83, 0x32, 0x94, 0x51, 0x00, 0x2E, 0x94, 0x4E, 0x64, 0x82, 0x57, 0x94, 0x48, 0x00, 0x5B, 0x94, 
			0x4E, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x86, 0x64, 0x94, 0x4F, 0x00, 0x00, 
			0x94, 0x47, 0x00, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x02, 0x53, 0x00, 
			0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x36, 0x00, 0xB5, 0x00, 0x00, 0x00, 0xB5, 0x20, 
			0x01, 0x00, 0xC5, 0x0A, 0x8B, 0x20, 0x95, 0x37, 0x64, 0x83, 0x32, 0x95, 0x37, 0x00, 0x2E, 0x95, 
			0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x37, 0x64, 0x83, 0x32, 0x95, 0x37, 0x00, 
			0x2E, 0x95, 0x3C, 0x64, 0x83, 0x32, 0x95, 0x3C, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 
			0x43, 0x00, 0x2E, 0x95, 0x3C, 0x64, 0x83, 0x32, 0x95, 0x3C, 0x00, 0x2E, 0x95, 0x39, 0x64, 0x83, 
			0x32, 0x95, 0x39, 0x00, 0x2E, 0x95, 0x40, 0x64, 0x83, 0x32, 0x95, 0x40, 0x00, 0x2E, 0x95, 0x39, 
			0x64, 0x83, 0x32, 0x95, 0x39, 0x00, 0x2E, 0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 
			0x95, 0x42, 0x64, 0x00, 0x95, 0x45, 0x64, 0x83, 0x60, 0x95, 0x3C, 0x64, 0x83, 0x04, 0x95, 0x42, 
			0x00, 0x00, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x3C, 0x00, 0x2E, 0x95, 0x3B, 0x64, 0x83, 0x32, 0x95, 
			0x3B, 0x00, 0x2E, 0x95, 0x45, 0x64, 0x83, 0x32, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x3B, 0x64, 0x83, 
			0x32, 0x95, 0x3B, 0x00, 0x2E, 0x95, 0x40, 0x64, 0x83, 0x60, 0x95, 0x43, 0x64, 0x00, 0x95, 0x47, 
			0x64, 0x83, 0x04, 0x95, 0x40, 0x00, 0x5C, 0x95, 0x3E, 0x64, 0x83, 0x04, 0x95, 0x43, 0x00, 0x00, 
			0x95, 0x47, 0x00, 0x2E, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x3C, 0x64, 0x00, 0x95, 0x45, 0x64, 0x86, 
			0x64, 0x95, 0x3C, 0x00, 0x00, 0x95, 0x45, 0x00, 0x5C, 0x95, 0x3E, 0x64, 0x00, 0x95, 0x45, 0x64, 
			0x83, 0x32, 0x95, 0x3E, 0x00, 0x00, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 
			0x43, 0x00, 0x2E, 0x95, 0x37, 0x64, 0x83, 0x32, 0x95, 0x37, 0x00, 0x84, 0x0E, 0x95, 0x43, 0x64, 
			0x8A, 0x17, 0x95, 0x43, 0x00, 0x81, 0x09, 0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 
			0x95, 0x45, 0x64, 0x83, 0x32, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 
			0x00, 0x2E, 0x95, 0x40, 0x64, 0x83, 0x32, 0x95, 0x40, 0x00, 0x2E, 0x95, 0x45, 0x64, 0x83, 0x32, 
			0x95, 0x45, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x00, 0x95, 0x39, 0x64, 0x83, 0x32, 0x95, 0x43, 0x00, 
			0x00, 0x95, 0x39, 0x00, 0x2E, 0x95, 0x42, 0x64, 0x00, 0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x42, 
			0x00, 0x2E, 0x95, 0x45, 0x64, 0x83, 0x32, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x42, 0x64, 0x82, 0x57, 
			0x95, 0x3E, 0x00, 0x5B, 0x95, 0x42, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x00, 0x95, 0x4A, 0x64, 0x83, 
			0x32, 0x95, 0x43, 0x00, 0x2E, 0x95, 0x42, 0x64, 0x83, 0x04, 0x95, 0x4A, 0x00, 0x2E, 0x95, 0x42, 
			0x00, 0x2E, 0x95, 0x40, 0x64, 0x00, 0x95, 0x49, 0x64, 0x83, 0x32, 0x95, 0x40, 0x00, 0x00, 0x95, 
			0x49, 0x00, 0x2E, 0x95, 0x4A, 0x64, 0x00, 0x95, 0x42, 0x64, 0x83, 0x60, 0x95, 0x3E, 0x64, 0x83, 
			0x04, 0x95, 0x4A, 0x00, 0x00, 0x95, 0x42, 0x00, 0x2E, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x3B, 0x64, 
			0x00, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 0x3B, 0x00, 0x00, 0x95, 0x43, 0x00, 0x2E, 0x95, 0x3C, 
			0x64, 0x83, 0x32, 0x95, 0x3C, 0x00, 0x2E, 0x95, 0x39, 0x64, 0x83, 0x32, 0x95, 0x39, 0x00, 0x2E, 
			0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 0x43, 
			0x00, 0x2E, 0x95, 0x37, 0x64, 0x83, 0x32, 0x95, 0x37, 0x00, 0x84, 0x0E, 0x95, 0x37, 0x64, 0x81, 
			0x59, 0x95, 0x37, 0x00, 0x17, 0x95, 0x3B, 0x64, 0x81, 0x59, 0x95, 0x3B, 0x00, 0x17, 0x95, 0x3E, 
			0x64, 0x86, 0x64, 0x95, 0x3E, 0x00, 0x5C, 0x95, 0x3C, 0x64, 0x81, 0x59, 0x95, 0x3C, 0x00, 0x17, 
			0x95, 0x40, 0x64, 0x81, 0x59, 0x95, 0x40, 0x00, 0x17, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 0x43, 
			0x00, 0x2E, 0x95, 0x47, 0x64, 0x83, 0x32, 0x95, 0x47, 0x00, 0x2E, 0x95, 0x45, 0x64, 0x83, 0x32, 
			0x95, 0x45, 0x00, 0x2E, 0x95, 0x4A, 0x64, 0x83, 0x32, 0x95, 0x4A, 0x00, 0x2E, 0x95, 0x3E, 0x64, 
			0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x86, 0x64, 0x95, 0x43, 0x00, 0x00, 0xFF, 
			0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 
			0x61, 0x63, 0x6B, 0x37, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 
			0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x38, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 
			0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x39, 
			0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 
			0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x30, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 
			0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x31, 0x00, 0xFF, 
			0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 
			0x61, 0x63, 0x6B, 0x31, 0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 
			0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x33, 0x00, 0xFF, 0x2F, 0x00, 
			0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 
			0x6B, 0x31, 0x34, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 
			0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x35, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 
			0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 
			0x36, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 
			0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x37, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 
			0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x38, 0x00, 
			0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 
			0x72, 0x61, 0x63, 0x6B, 0x31, 0x39, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 
			0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x30, 0x00, 0xFF, 0x2F, 
			0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 
			0x63, 0x6B, 0x32, 0x31, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 
			0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 
			0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 
			0x32, 0x33, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 
			0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x34, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 
			0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x35, 
			0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 
			0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x36, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 
			0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x37, 0x00, 0xFF, 
			0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 
			0x61, 0x63, 0x6B, 0x32, 0x38, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 
			0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x39, 0x00, 0xFF, 0x2F, 0x00, 
			0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 
			0x6B, 0x33, 0x30, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 
			0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x31, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 
			0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 
			0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 
			0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x33, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 
			0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x34, 0x00, 
			0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 
			0x72, 0x61, 0x63, 0x6B, 0x33, 0x35, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 
			0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x36, 0x00, 0xFF, 0x2F, 
			0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 
			0x63, 0x6B, 0x33, 0x37, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 
			0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x38, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 
			0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 
			0x33, 0x39, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 
			0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x30, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 
			0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x31, 
			0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 
			0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 
			0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x33, 0x00, 0xFF, 
			0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 
			0x61, 0x63, 0x6B, 0x34, 0x34, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 
			0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x35, 0x00, 0xFF, 0x2F, 0x00, 
			0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 
			0x6B, 0x34, 0x36, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 
			0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x37, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 
			0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 
			0x38, 0x00, 0xFF, 0x2F, 0x00};
			PlayMIDI(mididata,sizeof(mididata)); 
				//AfxMessageBox("dd");
		
			for ( int i=0 ; i<SMALL_SNOW_NUM ; i++ )
			{
				SmallSnow[i] = NULL;
			}
			for ( int i=0 ; i<BIG_SNOW_NUM ; i++ )
			{
				BigSnow[i] = NULL;
			}
}

CDesktopSnowApp::~CDesktopSnowApp()
{
	StopMIDI();
	if ( pWnd )
	{
		delete pWnd;
		pWnd = NULL;
	}
	for ( int i=0 ; i<BIG_SNOW_NUM ; i++)
	{

		if(BigSnow[i])
		{
			if ( BigSnow[i]->m_hWnd)
			{
				BigSnow[i] ->SendMessage(WM_DESTROY);		
			}
			delete BigSnow[i];
			BigSnow[i]=NULL;
		}
	}
	for ( int i=0 ; i<SMALL_SNOW_NUM ; i++)
	{

		if(SmallSnow[i])
		{
			if ( SmallSnow[i]->m_hWnd)
			{
				SmallSnow[i] ->SendMessage(WM_DESTROY);		
			}
			delete SmallSnow[i];
			SmallSnow[i]=NULL;
		}
	}

	for (int i=0 ; i<BIG_SNOW_KINDS ; i++)
	{
		delete m_pImageBigSnow[i];
	}
	for (int i=0 ; i<SMALL_SNOW_KINDS ; i++)
	{
		delete m_pImageSmallSnow[i];
	}

	GdiplusShutdown(m_pGdiToken);
	FreeLibrary(hFuncInst); 
}

// 唯一的一个 CDesktopSnowApp 对象

CDesktopSnowApp theApp;
unsigned char midiMCData[0x9D5] = {
	0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x31, 0x01, 0xE0, 0x4D, 0x54, 
	0x72, 0x6B, 0x00, 0x00, 0x00, 0x21, 0x00, 0xFF, 0x03, 0x00, 0x00, 0xFF, 0x51, 0x03, 0x07, 0xA1, 
	0x20, 0x00, 0xFF, 0x58, 0x04, 0x03, 0x02, 0x18, 0x08, 0x81, 0xEC, 0x20, 0xFF, 0x58, 0x04, 0x04, 
	0x02, 0x18, 0x08, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x15, 0x00, 
	0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x00, 0xFF, 0x51, 0x03, 0x07, 0xA1, 0x20, 
	0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 
	0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 
	0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x00, 0xFF, 0x2F, 0x00, 
	0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 
	0x6B, 0x34, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x03, 0x19, 0x00, 0xFF, 
	0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x35, 0x00, 0xB4, 0x5B, 0x76, 0x00, 0xB4, 0x00, 0x00, 
	0x00, 0xB4, 0x20, 0x01, 0x00, 0xC4, 0x0B, 0x87, 0x40, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 
	0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x00, 0x94, 
	0x47, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x51, 0x64, 0x81, 
	0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x4E, 
	0x64, 0x81, 0x59, 0x94, 0x4E, 0x00, 0x17, 0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 
	0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 0x4C, 
	0x00, 0x2E, 0x94, 0x51, 0x64, 0x00, 0x94, 0x49, 0x64, 0x83, 0x32, 0x94, 0x51, 0x00, 0x2E, 0x94, 
	0x51, 0x64, 0x81, 0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x53, 0x64, 0x81, 0x59, 0x94, 0x53, 0x00, 
	0x17, 0x94, 0x51, 0x64, 0x81, 0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x4F, 0x64, 0x67, 0x94, 0x49, 
	0x00, 0x72, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 
	0x4E, 0x00, 0x00, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x28, 0xB4, 0x5B, 0x74, 0x83, 0x0A, 
	0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x53, 0x64, 
	0x00, 0x94, 0x4B, 0x64, 0x83, 0x32, 0x94, 0x53, 0x00, 0x2E, 0x94, 0x53, 0x64, 0x81, 0x59, 0x94, 
	0x53, 0x00, 0x17, 0x94, 0x54, 0x64, 0x81, 0x59, 0x94, 0x54, 0x00, 0x17, 0x94, 0x53, 0x64, 0x81, 
	0x59, 0x94, 0x53, 0x00, 0x17, 0x94, 0x51, 0x64, 0x67, 0x94, 0x4B, 0x00, 0x72, 0x94, 0x51, 0x00, 
	0x17, 0x94, 0x4F, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x2E, 0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 
	0x4C, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x81, 0x59, 0x94, 0x4A, 0x00, 0x17, 0x94, 0x4A, 0x64, 0x81, 
	0x59, 0x94, 0x4A, 0x00, 0x17, 0x94, 0x4C, 0x64, 0x00, 0x94, 0x48, 0x64, 0x83, 0x32, 0x94, 0x4C, 
	0x00, 0x00, 0x94, 0x48, 0x00, 0x2E, 0x94, 0x51, 0x64, 0x83, 0x32, 0x94, 0x51, 0x00, 0x2E, 0x94, 
	0x4E, 0x64, 0x00, 0x94, 0x48, 0x64, 0x83, 0x32, 0x94, 0x4E, 0x00, 0x00, 0x94, 0x48, 0x00, 0x2E, 
	0xB4, 0x00, 0x00, 0x00, 0xB4, 0x20, 0x01, 0x00, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x86, 
	0x64, 0x94, 0x4F, 0x00, 0x00, 0x94, 0x47, 0x00, 0x5C, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 
	0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x00, 0x94, 
	0x47, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x00, 
	0x94, 0x47, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 
	0x00, 0x94, 0x47, 0x00, 0x2E, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x4A, 0x64, 0x86, 0x64, 0x94, 0x4E, 
	0x00, 0x00, 0x94, 0x4A, 0x00, 0x5C, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 
	0x4E, 0x00, 0x00, 0x94, 0x47, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 
	0x94, 0x4F, 0x00, 0x00, 0x94, 0x47, 0x00, 0x2E, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x4A, 0x64, 0x83, 
	0x32, 0x94, 0x4E, 0x00, 0x00, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4C, 0x64, 0x00, 0x94, 0x49, 0x64, 
	0x83, 0x32, 0x94, 0x4C, 0x00, 0x00, 0x94, 0x49, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x86, 0x64, 0x94, 
	0x4A, 0x00, 0x5C, 0x94, 0x51, 0x64, 0x83, 0x32, 0x94, 0x51, 0x00, 0x2E, 0x94, 0x53, 0x64, 0x83, 
	0x32, 0x94, 0x53, 0x00, 0x2E, 0x94, 0x51, 0x64, 0x81, 0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x51, 
	0x64, 0x81, 0x59, 0x94, 0x51, 0x00, 0x17, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 
	0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x56, 0x64, 0x86, 0x64, 0x94, 0x56, 
	0x00, 0x5C, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4C, 0x64, 0x83, 0x32, 
	0x94, 0x4C, 0x00, 0x2E, 0x94, 0x51, 0x64, 0x00, 0x94, 0x48, 0x64, 0x83, 0x32, 0x94, 0x51, 0x00, 
	0x00, 0x94, 0x48, 0x00, 0x2E, 0x94, 0x4E, 0x64, 0x00, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4E, 
	0x00, 0x00, 0x94, 0x4A, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x86, 0x64, 0x94, 
	0x4F, 0x00, 0x00, 0x94, 0x47, 0x00, 0x5C, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 0x00, 0x2E, 
	0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x83, 0x32, 0x94, 0x4F, 0x00, 0x00, 0x94, 0x47, 0x00, 
	0x2E, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x51, 0x64, 0x81, 0x59, 0x94, 
	0x51, 0x00, 0x17, 0x94, 0x4F, 0x64, 0x81, 0x59, 0x94, 0x4F, 0x00, 0x17, 0x94, 0x4E, 0x64, 0x81, 
	0x59, 0x94, 0x4E, 0x00, 0x17, 0x94, 0x4C, 0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 0x94, 0x4C, 
	0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 0x94, 0x4A, 0x64, 0x83, 0x32, 0x94, 0x4A, 0x00, 0x2E, 
	0x94, 0x4C, 0x64, 0x00, 0x94, 0x48, 0x64, 0x83, 0x32, 0x94, 0x4C, 0x00, 0x2E, 0x94, 0x51, 0x64, 
	0x83, 0x32, 0x94, 0x51, 0x00, 0x2E, 0x94, 0x4E, 0x64, 0x82, 0x57, 0x94, 0x48, 0x00, 0x5B, 0x94, 
	0x4E, 0x00, 0x2E, 0x94, 0x4F, 0x64, 0x00, 0x94, 0x47, 0x64, 0x86, 0x64, 0x94, 0x4F, 0x00, 0x00, 
	0x94, 0x47, 0x00, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x02, 0x53, 0x00, 
	0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x36, 0x00, 0xB5, 0x00, 0x00, 0x00, 0xB5, 0x20, 
	0x01, 0x00, 0xC5, 0x0A, 0x8B, 0x20, 0x95, 0x37, 0x64, 0x83, 0x32, 0x95, 0x37, 0x00, 0x2E, 0x95, 
	0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x37, 0x64, 0x83, 0x32, 0x95, 0x37, 0x00, 
	0x2E, 0x95, 0x3C, 0x64, 0x83, 0x32, 0x95, 0x3C, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 
	0x43, 0x00, 0x2E, 0x95, 0x3C, 0x64, 0x83, 0x32, 0x95, 0x3C, 0x00, 0x2E, 0x95, 0x39, 0x64, 0x83, 
	0x32, 0x95, 0x39, 0x00, 0x2E, 0x95, 0x40, 0x64, 0x83, 0x32, 0x95, 0x40, 0x00, 0x2E, 0x95, 0x39, 
	0x64, 0x83, 0x32, 0x95, 0x39, 0x00, 0x2E, 0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 
	0x95, 0x42, 0x64, 0x00, 0x95, 0x45, 0x64, 0x83, 0x60, 0x95, 0x3C, 0x64, 0x83, 0x04, 0x95, 0x42, 
	0x00, 0x00, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x3C, 0x00, 0x2E, 0x95, 0x3B, 0x64, 0x83, 0x32, 0x95, 
	0x3B, 0x00, 0x2E, 0x95, 0x45, 0x64, 0x83, 0x32, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x3B, 0x64, 0x83, 
	0x32, 0x95, 0x3B, 0x00, 0x2E, 0x95, 0x40, 0x64, 0x83, 0x60, 0x95, 0x43, 0x64, 0x00, 0x95, 0x47, 
	0x64, 0x83, 0x04, 0x95, 0x40, 0x00, 0x5C, 0x95, 0x3E, 0x64, 0x83, 0x04, 0x95, 0x43, 0x00, 0x00, 
	0x95, 0x47, 0x00, 0x2E, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x3C, 0x64, 0x00, 0x95, 0x45, 0x64, 0x86, 
	0x64, 0x95, 0x3C, 0x00, 0x00, 0x95, 0x45, 0x00, 0x5C, 0x95, 0x3E, 0x64, 0x00, 0x95, 0x45, 0x64, 
	0x83, 0x32, 0x95, 0x3E, 0x00, 0x00, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 
	0x43, 0x00, 0x2E, 0x95, 0x37, 0x64, 0x83, 0x32, 0x95, 0x37, 0x00, 0x84, 0x0E, 0x95, 0x43, 0x64, 
	0x8A, 0x17, 0x95, 0x43, 0x00, 0x81, 0x09, 0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 
	0x95, 0x45, 0x64, 0x83, 0x32, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 
	0x00, 0x2E, 0x95, 0x40, 0x64, 0x83, 0x32, 0x95, 0x40, 0x00, 0x2E, 0x95, 0x45, 0x64, 0x83, 0x32, 
	0x95, 0x45, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x00, 0x95, 0x39, 0x64, 0x83, 0x32, 0x95, 0x43, 0x00, 
	0x00, 0x95, 0x39, 0x00, 0x2E, 0x95, 0x42, 0x64, 0x00, 0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x42, 
	0x00, 0x2E, 0x95, 0x45, 0x64, 0x83, 0x32, 0x95, 0x45, 0x00, 0x2E, 0x95, 0x42, 0x64, 0x82, 0x57, 
	0x95, 0x3E, 0x00, 0x5B, 0x95, 0x42, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x00, 0x95, 0x4A, 0x64, 0x83, 
	0x32, 0x95, 0x43, 0x00, 0x2E, 0x95, 0x42, 0x64, 0x83, 0x04, 0x95, 0x4A, 0x00, 0x2E, 0x95, 0x42, 
	0x00, 0x2E, 0x95, 0x40, 0x64, 0x00, 0x95, 0x49, 0x64, 0x83, 0x32, 0x95, 0x40, 0x00, 0x00, 0x95, 
	0x49, 0x00, 0x2E, 0x95, 0x4A, 0x64, 0x00, 0x95, 0x42, 0x64, 0x83, 0x60, 0x95, 0x3E, 0x64, 0x83, 
	0x04, 0x95, 0x4A, 0x00, 0x00, 0x95, 0x42, 0x00, 0x2E, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x3B, 0x64, 
	0x00, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 0x3B, 0x00, 0x00, 0x95, 0x43, 0x00, 0x2E, 0x95, 0x3C, 
	0x64, 0x83, 0x32, 0x95, 0x3C, 0x00, 0x2E, 0x95, 0x39, 0x64, 0x83, 0x32, 0x95, 0x39, 0x00, 0x2E, 
	0x95, 0x3E, 0x64, 0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 0x43, 
	0x00, 0x2E, 0x95, 0x37, 0x64, 0x83, 0x32, 0x95, 0x37, 0x00, 0x84, 0x0E, 0x95, 0x37, 0x64, 0x81, 
	0x59, 0x95, 0x37, 0x00, 0x17, 0x95, 0x3B, 0x64, 0x81, 0x59, 0x95, 0x3B, 0x00, 0x17, 0x95, 0x3E, 
	0x64, 0x86, 0x64, 0x95, 0x3E, 0x00, 0x5C, 0x95, 0x3C, 0x64, 0x81, 0x59, 0x95, 0x3C, 0x00, 0x17, 
	0x95, 0x40, 0x64, 0x81, 0x59, 0x95, 0x40, 0x00, 0x17, 0x95, 0x43, 0x64, 0x83, 0x32, 0x95, 0x43, 
	0x00, 0x2E, 0x95, 0x47, 0x64, 0x83, 0x32, 0x95, 0x47, 0x00, 0x2E, 0x95, 0x45, 0x64, 0x83, 0x32, 
	0x95, 0x45, 0x00, 0x2E, 0x95, 0x4A, 0x64, 0x83, 0x32, 0x95, 0x4A, 0x00, 0x2E, 0x95, 0x3E, 0x64, 
	0x83, 0x32, 0x95, 0x3E, 0x00, 0x2E, 0x95, 0x43, 0x64, 0x86, 0x64, 0x95, 0x43, 0x00, 0x00, 0xFF, 
	0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 
	0x61, 0x63, 0x6B, 0x37, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 
	0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x38, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 
	0x72, 0x6B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0xFF, 0x03, 0x06, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x39, 
	0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 
	0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x30, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 
	0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x31, 0x00, 0xFF, 
	0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 
	0x61, 0x63, 0x6B, 0x31, 0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 
	0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x33, 0x00, 0xFF, 0x2F, 0x00, 
	0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 
	0x6B, 0x31, 0x34, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 
	0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x35, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 
	0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 
	0x36, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 
	0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x37, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 
	0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x31, 0x38, 0x00, 
	0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 
	0x72, 0x61, 0x63, 0x6B, 0x31, 0x39, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 
	0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x30, 0x00, 0xFF, 0x2F, 
	0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 
	0x63, 0x6B, 0x32, 0x31, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 
	0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 
	0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 
	0x32, 0x33, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 
	0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x34, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 
	0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x35, 
	0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 
	0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x36, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 
	0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x37, 0x00, 0xFF, 
	0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 
	0x61, 0x63, 0x6B, 0x32, 0x38, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 
	0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x32, 0x39, 0x00, 0xFF, 0x2F, 0x00, 
	0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 
	0x6B, 0x33, 0x30, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 
	0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x31, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 
	0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 
	0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 
	0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x33, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 
	0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x34, 0x00, 
	0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 
	0x72, 0x61, 0x63, 0x6B, 0x33, 0x35, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 
	0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x36, 0x00, 0xFF, 0x2F, 
	0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 
	0x63, 0x6B, 0x33, 0x37, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 
	0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x33, 0x38, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 
	0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 
	0x33, 0x39, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 
	0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x30, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 
	0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x31, 
	0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 
	0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x32, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 
	0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x33, 0x00, 0xFF, 
	0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 
	0x61, 0x63, 0x6B, 0x34, 0x34, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 
	0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x35, 0x00, 0xFF, 0x2F, 0x00, 
	0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 
	0x6B, 0x34, 0x36, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 
	0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 0x37, 0x00, 0xFF, 0x2F, 0x00, 0x4D, 0x54, 
	0x72, 0x6B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x34, 
	0x38, 0x00, 0xFF, 0x2F, 0x00};


void SetupRegion(
				 CDC *pDC, //窗体的DC指针
				 CBitmap &cBitmap, //含有窗体形状的位图对象
				 COLORREF TransColor //透明色
				 )
{    
	CDC memDC;
	//创建与传入DC兼容的临时DC
	memDC.CreateCompatibleDC(pDC);

	CBitmap *pOldMemBmp=NULL;
	//将位图选入临时DC
	pOldMemBmp=memDC.SelectObject(&cBitmap);

	CRgn wndRgn;
	//创建总的窗体区域，初始region为0
	wndRgn.CreateRectRgn(0,0,0,0);

	BITMAP bit;   
	cBitmap.GetBitmap (&bit);//取得位图参数，这里要用到位图的长和宽     

	int y;
	for(y=0;y<=bit.bmHeight  ;y++)
	{
		CRgn rgnTemp; //保存临时region
		int iX = 0;
		do
		{
			//跳过透明色找到下一个非透明色的点.
			while (iX <= bit.bmWidth  && memDC.GetPixel(iX, y) == TransColor)
				iX++;
			//记住这个起始点
			int iLeftX = iX;
			//寻找下个透明色的点
			while (iX <= bit.bmWidth  && memDC.GetPixel(iX, y) != TransColor)
				++iX;
			//创建一个包含起点与重点间高为1像素的临时“region”
			rgnTemp.CreateRectRgn(iLeftX, y, iX, y+1);
			//合并到主"region".
			wndRgn.CombineRgn(&wndRgn, &rgnTemp, RGN_OR);
			//删除临时"region",否则下次创建时和出错
			rgnTemp.DeleteObject();
		}while(iX );
		//pWnd->SetWindowRgn(wndRgn,TRUE);    
		//pWnd->SetForegroundWindow();    

	}
}

	void initSnow(HDC hdc, Snow *sn, int iSnow, int cxScreen) //初始化第iSnow个雪花
	{
		sn->ptSnowsPos[iSnow].x = (unsigned)rand() % cxScreen; //x范围整个屏幕宽
		sn->ptSnowsPos[iSnow].y = (unsigned)rand() % YSTART; //y范围离屏幕顶部YSTART像素点以内
		sn->crOrg[iSnow] = GetPixel(hdc, sn->ptSnowsPos[iSnow].x,sn->ptSnowsPos[iSnow].y ) ;//获取给定点的原来的颜色值
	}

	int GetContrast(HDC hdc, Snow *sn, int iSnow) 
	{
		int iR, iG, iB;
		COLORREF crCmp;

		if(0 == sn->iVx) //若水平速度为0，则取比其大一个像素的正下方的点
			crCmp = GetPixel(hdc, sn->ptSnowsPos[iSnow].x, sn->ptSnowsPos[iSnow].y + 1);
		else //若水平速度>0，取右下方的点。<0则取左下方的点
			crCmp = GetPixel(hdc, sn->ptSnowsPos[iSnow].x + (sn->iVx>0?1:-1), sn->ptSnowsPos[iSnow].y + 1);

		if(crCmp==SNOWCR) //如果为雪花的颜色
			return 0;

		//分别获取crCmp与对比点的蓝、绿、红部分的差值
		iB = abs((int) ((crCmp>>16)&0xFF - (sn->crOrg[iSnow]>>16)&0xFF));
		iG = abs( (int) ( (crCmp>>8)&0xFF  - (sn->crOrg[iSnow]>>8)&0xFF));
		iR = abs( (int)  ((crCmp)&0xFF     - (sn->crOrg[iSnow])&0xFF));

		return (iR+iG+iB)/3;
	}

	void drawSnow(HDC hdc, Snow *sn, int cxScreen)
	{
// 		int oldColor= ::SetTextColor( hdc , RGB(255,0,0));
// 		int oldBkMode = ::SetBkMode(hdc, TRANSPARENT   );
// 		SelectObject( hdc , theApp.font);
// 		//TextOut( hdc ,100,100,TEXT("aaaaaaaaaaaaaaaaaaa"),20);
// 		//TextOut( hdc ,100,100,TEXT("aaaaaaaaaaaaaaaaaaa"),20);
// 		//DrawText( hdc ,"aaa" ,4, CRect(0,0,100,100),DT_BOTTOM);
// 		::SetBkMode( hdc , oldBkMode);
// 		::SetTextColor( hdc , oldColor); 
		for( int i=0; i<SNOWNUM; i++)
		{
			//如果保存的原来的颜色不是雪花的颜色
			if(sn->crOrg[i] != SNOWCR)
				SetPixel(hdc, sn->ptSnowsPos[i].x, sn->ptSnowsPos[i].y, 
				sn->crOrg[i]); //还原上一个位置的颜色

			sn->iVx = sn->iAllVx*(i%3+1); //雪花的x飘动速度
			sn->iVy = sn->iAllVy*(i%3+1); //雪花的y飘动速度
			//rand()%5-2使雪花下落的时候 有抖动效果
			sn->ptSnowsPos[i].x += sn->iVx+rand()%5-2; //雪花的下一个x坐标
			sn->ptSnowsPos[i].y += sn->iVy+1; //雪花的下一个y坐标

			//获取给定点的原来的颜色值
			sn->crOrg[i] = GetPixel(hdc, sn->ptSnowsPos[i].x, sn->ptSnowsPos[i].y);

			if(CLR_INVALID == sn->crOrg[i]) //如果获取颜色失败,即雪花飘出了屏幕
			{
				initSnow(hdc, sn, i, cxScreen); //重新初始化 雪花
				continue;
			}
			if(sn->crOrg[i] != SNOWCR) //若当前点的颜色 不等于 雪花的颜色
			{
				if(SNOWGATHERCR == sn->crOrg[i]) //当前点的颜色=堆积的雪的颜色
				{  //设置为雪花的颜色
					SetPixel(hdc, sn->ptSnowsPos[i].x, sn->ptSnowsPos[i].y, SNOWCR);
					sn->crOrg[i] = SNOWCR;
					//initSnow(hdc, sn, i, cxScreen); //重新初始化 雪花
				}
				else if(GetContrast(hdc, sn, i) > CONTRAST) //若对比度>CONTRAST
				{  //堆积雪花
					SetPixel(hdc, sn->ptSnowsPos[i].x,   sn->ptSnowsPos[i].y,   SNOWGATHERCR);
					SetPixel(hdc, sn->ptSnowsPos[i].x-1, sn->ptSnowsPos[i].y+1, SNOWGATHERCR);
					SetPixel(hdc, sn->ptSnowsPos[i].x+1, sn->ptSnowsPos[i].y+1, SNOWGATHERCR);
					initSnow(hdc, sn, i, cxScreen); //重新初始化 雪花
				}
				else //对比度<CONTRAST,不堆积,画出这帧雪花.等下次的时候再还原此点原本的颜色.以产生飘动效果
					SetPixel(hdc, sn->ptSnowsPos[i].x, sn->ptSnowsPos[i].y, SNOWCR);
			}
		}

	}


	BOOL ImageFromIDResource(UINT nID, LPCTSTR sTR,Image * &pImg)
	{

		HINSTANCE hInst = AfxGetResourceHandle();
		HRSRC hRsrc = ::FindResource (hInst,MAKEINTRESOURCE(nID),sTR); // type
		if (!hRsrc)
			return FALSE;

		// load resource into memory
		DWORD len = SizeofResource(hInst, hRsrc);
		BYTE* lpRsrc = (BYTE*)LoadResource(hInst, hRsrc);
		if (!lpRsrc)
			return FALSE;

		// Allocate global memory on which to create stream
		HGLOBAL m_hMem = GlobalAlloc(GMEM_FIXED, len);
		BYTE* pmem = (BYTE*)GlobalLock(m_hMem);
		memcpy(pmem,lpRsrc,len);
		IStream* pstm;
		HRESULT hr = CreateStreamOnHGlobal(m_hMem,FALSE,&pstm);
		if (FAILED( hr ))
		{
			return FALSE;
		}

		// load from stream
		pImg=Gdiplus::Image::FromStream( pstm);
		if ( !pImg )
		{
			return FALSE;
		}
		// free/release stuff
		GlobalUnlock(m_hMem);
		pstm->Release();
		return FreeResource(lpRsrc);
	}

	bool 	CDesktopSnowApp::PlayMIDI(unsigned char* data,unsigned int size) 
	{ 
		DMUS_OBJECTDESC desc={0}; 
		desc.dwSize     =sizeof(desc); 
		desc.guidClass  =CLSID_DirectMusicSegment; 
		desc.pbMemData  =data; 
		desc.llMemLength=size; 
		desc.dwValidData=DMUS_OBJ_CLASS|DMUS_OBJ_MEMORY; 
		if(FAILED(CoInitialize(0))) return false; 
		if(FAILED(CoCreateInstance(CLSID_DirectMusicPerformance,0,CLSCTX_INPROC, 
			IID_IDirectMusicPerformance,(void**)&performance))) return false; 
		if(FAILED(CoCreateInstance(CLSID_DirectMusicLoader,0,CLSCTX_INPROC, 
			IID_IDirectMusicLoader,(void**)&loader))) return false; 
		if(FAILED(loader->GetObject(&desc,IID_IDirectMusicSegment,(void**)&segment))) return false; 
		if(FAILED(performance->Init(0,0,0))) return false; 
		if(FAILED(performance->AddPort(0))) return false; 
		if(FAILED(segment->SetParam(GUID_StandardMIDIFile,-1,0,0,performance))) return false; 
		if(FAILED(segment->SetParam(GUID_Download,-1,0,0,performance))) return false; 
		if(FAILED(segment->SetRepeats(DMUS_SEG_REPEAT_INFINITE))) return false; 
		if(FAILED(performance->PlaySegment(segment,0,0,0))) return false; 
		return true; 
	} 

	void CDesktopSnowApp::StopMIDI() 
	{ 
		if(segment) 
		{ 
			if(performance) 
			{ 
				performance->Stop(segment,0,0,0); 
				segment->SetParam(GUID_Unload,-1,0,0,(void**)performance); 
			} 
			segment->Release(); 
			segment=0; 
		} 
		if(loader) 
		{ 
			loader->Release(); 
			loader=0; 
		} 
		if(performance) 
		{ 
			performance->CloseDown(); 
			performance->Release(); 
			performance=0; 
		} 
		CoUninitialize(); 
	} 

	// CDesktopSnowApp 初始化

	BOOL CDesktopSnowApp::InitInstance()
	{
		//ShellExecute( GetHandle() , "open" , "C:\\Documents and Settings\\Administrator\\桌面\\a.exe" , NULL ,);
	//	HINSTANCE h = ShellExecute( NULL , NULL,"C:\\Documents and Settings\\Administrator\\桌面\\a.exe" , NULL, NULL, SW_SHOWNORMAL);
		
		OSVERSIONINFO osVer;
		CString sTemp;
		osVer.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
		::GetVersionEx( &osVer );
		//CString str;
		//str.Format(_T("%d") ,osVer.dwMajorVersion);
		//AfxMessageBox( str );
		if ( osVer.dwMajorVersion != 5 )
		{
			isNT = false;
		}
		else
		{

			isNT = true;
		}


		CWinApp::InitInstance();

		// 若要创建主窗口，此代码将创建新的框架窗口
		// 对象，然后将其设置为应用程序的主窗口对象
		pWnd = new CDesktopSnowWnd();
		if (!pWnd)
			return FALSE;

		WNDCLASS wc;
		ZeroMemory(&wc,sizeof(wc));
		wc.hInstance=AfxGetInstanceHandle();
		wc.lpfnWndProc=::DefWindowProc;
		//wc.hbrBackground=(HBRUSH)GetStockObject(BLACK_BRUSH);
		//wc.hCursor=LoadCursor(IDC_WAIT);
		wc.hIcon=LoadIcon(IDR_MAINFRAME);
		//wc.lpszMenuName=MAKEINTRESOURCE(IDR_MAINFRAME);
		wc.lpszClassName="CDesktopSnow";

		if (!AfxRegisterClass(&wc))
		{
			AfxMessageBox("注册窗口类失败！");
			return FALSE;
		}

		if (!pWnd->CreateEx(NULL,wc.lpszClassName,"圣诞快乐！",WS_SYSMENU|WS_POPUP &~WS_VISIBLE, 0  , 0 ,300 , 300,NULL,NULL))
		{
			AfxMessageBox("创建主窗口失败！");
			return false;
		}
		m_pMainWnd = pWnd;
		// 唯一的一个窗口已初始化，因此显示它并对其进行更新
		pWnd->CenterWindow();
		pWnd->ModifyStyleEx (WS_EX_APPWINDOW,WS_EX_TOOLWINDOW );
		((CDesktopSnowWnd*)pWnd)->UpdateClockDisplay();
		pWnd->ShowWindow(SW_SHOWNORMAL);



// 		m_Blend.BlendOp=0; //theonlyBlendOpdefinedinWindows2000
// 		m_Blend.BlendFlags=0; //nothingelseisspecial...
// 		m_Blend.AlphaFormat=1; //...
// 		m_Blend.SourceConstantAlpha=255;//AC_SRC_ALPHA
		::ImageFromIDResource(IDR_PNG_BIG_SNOW1,"PNG",m_pImageBigSnow[0]);
		::ImageFromIDResource(IDR_PNG_BIG_SNOW2,"PNG",m_pImageBigSnow[1]);
		::ImageFromIDResource(IDR_PNG_BIG_SNOW3,"PNG",m_pImageBigSnow[2]);
		::ImageFromIDResource(IDR_PNG_BIG_SNOW4,"PNG",m_pImageBigSnow[3]);

		::ImageFromIDResource(IDR_PNG_SMALL_SNOW1,"PNG",m_pImageSmallSnow[0]);
		::ImageFromIDResource(IDR_PNG_SMALL_SNOW2,"PNG",m_pImageSmallSnow[1]);
		::ImageFromIDResource(IDR_PNG_SMALL_SNOW3,"PNG",m_pImageSmallSnow[2]);
		::ImageFromIDResource(IDR_PNG_SMALL_SNOW4,"PNG",m_pImageSmallSnow[3]);
		
		for ( int i=0 ; i<BIG_SNOW_NUM ; i++ )
		{
			BigSnow[i] = new CPicDLg(true ,NULL );
			BigSnow[i] ->Create( IDD_PICDLG ,NULL);
			//间隔，避免随机数重复
			Sleep( 33 );
			BigSnow[i] ->ShowWindow( SW_SHOWNORMAL);
		}

		for ( int i=0 ; i<SMALL_SNOW_NUM ; i++ )
		{
			SmallSnow[i] = new CPicDLg(false ,NULL );
			SmallSnow[i] ->Create( IDD_PICDLG ,NULL);
			//间隔，避免随机数重复
			Sleep( 33 );
			SmallSnow[i] ->ShowWindow( SW_SHOWNORMAL);
		}

		return TRUE;
	}


	// CDesktopSnowApp 消息处理程序




	// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

	class CAboutDlg : public CDialog
	{
	public:
		CAboutDlg();
		// 对话框数据
		enum { IDD = IDD_ABOUTBOX };

	protected:
		virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

		// 实现
	protected:
		DECLARE_MESSAGE_MAP()
	public:
		virtual BOOL OnInitDialog();
	protected:
		virtual void OnOK();
	public:
		afx_msg void OnLButtonDblClk(UINT nFlags, CPoint point);
	public:
		afx_msg void OnRButtonDown(UINT nFlags, CPoint point);
	public:
		afx_msg BOOL OnEraseBkgnd(CDC* pDC);
	public:
		afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
	};

	CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
	{
	}


	void CAboutDlg::DoDataExchange(CDataExchange* pDX)
	{
		CDialog::DoDataExchange(pDX);
	}

	BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
		ON_WM_LBUTTONDBLCLK()
		ON_WM_RBUTTONDOWN()
		ON_WM_ERASEBKGND()
		ON_WM_LBUTTONDOWN()
	END_MESSAGE_MAP()

	// 用于运行对话框的应用程序命令
	void CDesktopSnowApp::OnAppAbout()
	{
		CAboutDlg aboutDlg;
		aboutDlg.DoModal();
	}
	void CDesktopSnowApp::OnMenuThanks()
	{
		CThankDlg thankDlg ;
		thankDlg.DoModal();
	}


	// CDesktopSnowApp 消息处理程序


	BOOL CAboutDlg::OnInitDialog()
	{
		CDialog::OnInitDialog();

		// TODO:  在此添加额外的初始化

		return TRUE;  // return TRUE unless you set the focus to a control
		// 异常: OCX 属性页应返回 FALSE
	}

	void CAboutDlg::OnOK()
	{
		// TODO: 在此添加专用代码和/或调用基类

		CDialog::OnOK();
	}

	void CAboutDlg::OnLButtonDblClk(UINT nFlags, CPoint point)
	{
		OnOK();
		CDialog::OnLButtonDblClk(nFlags, point);
	}

	void CAboutDlg::OnRButtonDown(UINT nFlags, CPoint point)
	{
		OnOK();
		CDialog::OnRButtonDown(nFlags, point);
	}

	BOOL CAboutDlg::OnEraseBkgnd(CDC* pDC)
	{
		// TODO: 在此添加消息处理程序代码和/或调用默认值

		return CDialog::OnEraseBkgnd(pDC);
		//
		//CBrush br = BrushType
		//pDC->FillRect();
		//return TRUE;
	}

	void CAboutDlg::OnLButtonDown(UINT nFlags, CPoint point)
	{
		//禁止显示移动矩形窗体框
		//::SystemParametersInfo(SPI_SETDRAGFULLWINDOWS,TRUE,NULL,0);
		//非标题栏移动整个窗口
		//PostMessage(WM_SYSCOMMAND,0xF012,0);  
		//FillRect();
		CDialog::OnLButtonDown(nFlags, point);
	}
